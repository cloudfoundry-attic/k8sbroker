// Code generated by counterfeiter. DO NOT EDIT.
package k8sbroker_fake

import (
	sync "sync"

	k8sbroker "code.cloudfoundry.org/k8sbroker/k8sbroker"
	csi "github.com/container-storage-interface/spec/lib/go/csi/v0"
	brokerapi "github.com/pivotal-cf/brokerapi"
)

type FakeServicesRegistry struct {
	BrokerServicesStub        func() []brokerapi.Service
	brokerServicesMutex       sync.RWMutex
	brokerServicesArgsForCall []struct {
	}
	brokerServicesReturns struct {
		result1 []brokerapi.Service
	}
	brokerServicesReturnsOnCall map[int]struct {
		result1 []brokerapi.Service
	}
	ControllerClientStub        func(string) (csi.ControllerClient, error)
	controllerClientMutex       sync.RWMutex
	controllerClientArgsForCall []struct {
		arg1 string
	}
	controllerClientReturns struct {
		result1 csi.ControllerClient
		result2 error
	}
	controllerClientReturnsOnCall map[int]struct {
		result1 csi.ControllerClient
		result2 error
	}
	DriverNameStub        func(string) (string, error)
	driverNameMutex       sync.RWMutex
	driverNameArgsForCall []struct {
		arg1 string
	}
	driverNameReturns struct {
		result1 string
		result2 error
	}
	driverNameReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	IdentityClientStub        func(string) (csi.IdentityClient, error)
	identityClientMutex       sync.RWMutex
	identityClientArgsForCall []struct {
		arg1 string
	}
	identityClientReturns struct {
		result1 csi.IdentityClient
		result2 error
	}
	identityClientReturnsOnCall map[int]struct {
		result1 csi.IdentityClient
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServicesRegistry) BrokerServices() []brokerapi.Service {
	fake.brokerServicesMutex.Lock()
	ret, specificReturn := fake.brokerServicesReturnsOnCall[len(fake.brokerServicesArgsForCall)]
	fake.brokerServicesArgsForCall = append(fake.brokerServicesArgsForCall, struct {
	}{})
	fake.recordInvocation("BrokerServices", []interface{}{})
	fake.brokerServicesMutex.Unlock()
	if fake.BrokerServicesStub != nil {
		return fake.BrokerServicesStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.brokerServicesReturns
	return fakeReturns.result1
}

func (fake *FakeServicesRegistry) BrokerServicesCallCount() int {
	fake.brokerServicesMutex.RLock()
	defer fake.brokerServicesMutex.RUnlock()
	return len(fake.brokerServicesArgsForCall)
}

func (fake *FakeServicesRegistry) BrokerServicesCalls(stub func() []brokerapi.Service) {
	fake.brokerServicesMutex.Lock()
	defer fake.brokerServicesMutex.Unlock()
	fake.BrokerServicesStub = stub
}

func (fake *FakeServicesRegistry) BrokerServicesReturns(result1 []brokerapi.Service) {
	fake.brokerServicesMutex.Lock()
	defer fake.brokerServicesMutex.Unlock()
	fake.BrokerServicesStub = nil
	fake.brokerServicesReturns = struct {
		result1 []brokerapi.Service
	}{result1}
}

func (fake *FakeServicesRegistry) BrokerServicesReturnsOnCall(i int, result1 []brokerapi.Service) {
	fake.brokerServicesMutex.Lock()
	defer fake.brokerServicesMutex.Unlock()
	fake.BrokerServicesStub = nil
	if fake.brokerServicesReturnsOnCall == nil {
		fake.brokerServicesReturnsOnCall = make(map[int]struct {
			result1 []brokerapi.Service
		})
	}
	fake.brokerServicesReturnsOnCall[i] = struct {
		result1 []brokerapi.Service
	}{result1}
}

func (fake *FakeServicesRegistry) ControllerClient(arg1 string) (csi.ControllerClient, error) {
	fake.controllerClientMutex.Lock()
	ret, specificReturn := fake.controllerClientReturnsOnCall[len(fake.controllerClientArgsForCall)]
	fake.controllerClientArgsForCall = append(fake.controllerClientArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ControllerClient", []interface{}{arg1})
	fake.controllerClientMutex.Unlock()
	if fake.ControllerClientStub != nil {
		return fake.ControllerClientStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.controllerClientReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServicesRegistry) ControllerClientCallCount() int {
	fake.controllerClientMutex.RLock()
	defer fake.controllerClientMutex.RUnlock()
	return len(fake.controllerClientArgsForCall)
}

func (fake *FakeServicesRegistry) ControllerClientCalls(stub func(string) (csi.ControllerClient, error)) {
	fake.controllerClientMutex.Lock()
	defer fake.controllerClientMutex.Unlock()
	fake.ControllerClientStub = stub
}

func (fake *FakeServicesRegistry) ControllerClientArgsForCall(i int) string {
	fake.controllerClientMutex.RLock()
	defer fake.controllerClientMutex.RUnlock()
	argsForCall := fake.controllerClientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServicesRegistry) ControllerClientReturns(result1 csi.ControllerClient, result2 error) {
	fake.controllerClientMutex.Lock()
	defer fake.controllerClientMutex.Unlock()
	fake.ControllerClientStub = nil
	fake.controllerClientReturns = struct {
		result1 csi.ControllerClient
		result2 error
	}{result1, result2}
}

func (fake *FakeServicesRegistry) ControllerClientReturnsOnCall(i int, result1 csi.ControllerClient, result2 error) {
	fake.controllerClientMutex.Lock()
	defer fake.controllerClientMutex.Unlock()
	fake.ControllerClientStub = nil
	if fake.controllerClientReturnsOnCall == nil {
		fake.controllerClientReturnsOnCall = make(map[int]struct {
			result1 csi.ControllerClient
			result2 error
		})
	}
	fake.controllerClientReturnsOnCall[i] = struct {
		result1 csi.ControllerClient
		result2 error
	}{result1, result2}
}

func (fake *FakeServicesRegistry) DriverName(arg1 string) (string, error) {
	fake.driverNameMutex.Lock()
	ret, specificReturn := fake.driverNameReturnsOnCall[len(fake.driverNameArgsForCall)]
	fake.driverNameArgsForCall = append(fake.driverNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DriverName", []interface{}{arg1})
	fake.driverNameMutex.Unlock()
	if fake.DriverNameStub != nil {
		return fake.DriverNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.driverNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServicesRegistry) DriverNameCallCount() int {
	fake.driverNameMutex.RLock()
	defer fake.driverNameMutex.RUnlock()
	return len(fake.driverNameArgsForCall)
}

func (fake *FakeServicesRegistry) DriverNameCalls(stub func(string) (string, error)) {
	fake.driverNameMutex.Lock()
	defer fake.driverNameMutex.Unlock()
	fake.DriverNameStub = stub
}

func (fake *FakeServicesRegistry) DriverNameArgsForCall(i int) string {
	fake.driverNameMutex.RLock()
	defer fake.driverNameMutex.RUnlock()
	argsForCall := fake.driverNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServicesRegistry) DriverNameReturns(result1 string, result2 error) {
	fake.driverNameMutex.Lock()
	defer fake.driverNameMutex.Unlock()
	fake.DriverNameStub = nil
	fake.driverNameReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeServicesRegistry) DriverNameReturnsOnCall(i int, result1 string, result2 error) {
	fake.driverNameMutex.Lock()
	defer fake.driverNameMutex.Unlock()
	fake.DriverNameStub = nil
	if fake.driverNameReturnsOnCall == nil {
		fake.driverNameReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.driverNameReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeServicesRegistry) IdentityClient(arg1 string) (csi.IdentityClient, error) {
	fake.identityClientMutex.Lock()
	ret, specificReturn := fake.identityClientReturnsOnCall[len(fake.identityClientArgsForCall)]
	fake.identityClientArgsForCall = append(fake.identityClientArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("IdentityClient", []interface{}{arg1})
	fake.identityClientMutex.Unlock()
	if fake.IdentityClientStub != nil {
		return fake.IdentityClientStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.identityClientReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServicesRegistry) IdentityClientCallCount() int {
	fake.identityClientMutex.RLock()
	defer fake.identityClientMutex.RUnlock()
	return len(fake.identityClientArgsForCall)
}

func (fake *FakeServicesRegistry) IdentityClientCalls(stub func(string) (csi.IdentityClient, error)) {
	fake.identityClientMutex.Lock()
	defer fake.identityClientMutex.Unlock()
	fake.IdentityClientStub = stub
}

func (fake *FakeServicesRegistry) IdentityClientArgsForCall(i int) string {
	fake.identityClientMutex.RLock()
	defer fake.identityClientMutex.RUnlock()
	argsForCall := fake.identityClientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServicesRegistry) IdentityClientReturns(result1 csi.IdentityClient, result2 error) {
	fake.identityClientMutex.Lock()
	defer fake.identityClientMutex.Unlock()
	fake.IdentityClientStub = nil
	fake.identityClientReturns = struct {
		result1 csi.IdentityClient
		result2 error
	}{result1, result2}
}

func (fake *FakeServicesRegistry) IdentityClientReturnsOnCall(i int, result1 csi.IdentityClient, result2 error) {
	fake.identityClientMutex.Lock()
	defer fake.identityClientMutex.Unlock()
	fake.IdentityClientStub = nil
	if fake.identityClientReturnsOnCall == nil {
		fake.identityClientReturnsOnCall = make(map[int]struct {
			result1 csi.IdentityClient
			result2 error
		})
	}
	fake.identityClientReturnsOnCall[i] = struct {
		result1 csi.IdentityClient
		result2 error
	}{result1, result2}
}

func (fake *FakeServicesRegistry) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.brokerServicesMutex.RLock()
	defer fake.brokerServicesMutex.RUnlock()
	fake.controllerClientMutex.RLock()
	defer fake.controllerClientMutex.RUnlock()
	fake.driverNameMutex.RLock()
	defer fake.driverNameMutex.RUnlock()
	fake.identityClientMutex.RLock()
	defer fake.identityClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServicesRegistry) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8sbroker.ServicesRegistry = new(FakeServicesRegistry)
